#!/usr/bin/env python3
"""
Script de monitoreo autom√°tico para procesar logs de CUPS
Se ejecuta cada 10 minutos autom√°ticamente en segundo plano
"""

import subprocess
import time
import logging
import sys
import os
from datetime import datetime

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('monitor.log'),
        logging.StreamHandler()
    ]
)

def run_log_processor():
    """Ejecutar el procesador de logs"""
    try:
        # Ejecutar procesar_logs.py
        result = subprocess.run(
            [sys.executable, 'procesar_logs.py'],
            capture_output=True,
            text=True,
            timeout=60  # Timeout de 60 segundos
        )
        
        if result.returncode == 0:
            logging.info("‚úÖ Procesamiento de logs completado exitosamente")
            if result.stdout:
                logging.info(f"Salida: {result.stdout.strip()}")
        else:
            logging.error(f"‚ùå Error en el procesamiento: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        logging.error("‚ùå Timeout: El procesamiento tard√≥ m√°s de 60 segundos")
    except Exception as e:
        logging.error(f"‚ùå Error ejecutando procesador: {e}")

def main():
    """Funci√≥n principal del monitoreo autom√°tico"""
    interval_minutes = 10
    interval_seconds = interval_minutes * 60
    
    logging.info(f"üöÄ Iniciando monitoreo autom√°tico cada {interval_minutes} minutos")
    logging.info(f"üìÅ Directorio de trabajo: {os.getcwd()}")
    logging.info(f"üêç Python ejecutable: {sys.executable}")
    
    try:
        while True:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            logging.info(f"‚è∞ [{current_time}] Ejecutando procesamiento de logs...")
            
            # Ejecutar el procesador
            run_log_processor()
            
            # Calcular pr√≥xima ejecuci√≥n
            next_run = datetime.now().timestamp() + interval_seconds
            next_run_str = datetime.fromtimestamp(next_run).strftime("%Y-%m-%d %H:%M:%S")
            
            logging.info(f"‚è≥ Pr√≥xima ejecuci√≥n: {next_run_str}")
            logging.info("-" * 50)
            
            # Esperar hasta la pr√≥xima ejecuci√≥n
            time.sleep(interval_seconds)
            
    except KeyboardInterrupt:
        logging.info("üõë Monitoreo detenido por el usuario")
    except Exception as e:
        logging.error(f"‚ùå Error en el monitoreo: {e}")

if __name__ == "__main__":
    main() 